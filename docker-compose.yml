version: "3.9"

x-kong-config: &kong-env
  KONG_DATABASE: postgres
  KONG_PG_DATABASE: kong
  KONG_PG_HOST: db
  KONG_PG_USER: kong
  KONG_PG_PASSWORD: kong
  KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password

volumes:
  kong_data: {}
  kong_prefix_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  kong_tmp_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs

networks:
  kong-net:
    external: false

services:
  kong-migrations:
    image: "kong:latest"
    command: kong migrations bootstrap
    depends_on:
      - db
    environment:
      <<: *kong-env
    secrets:
      - kong_postgres_password
    networks:
      - kong-net
    restart: on-failure

  kong-migrations-up:
    image: "kong:latest"
    command: kong migrations up && kong migrations finish
    depends_on:
      - db
    environment:
      <<: *kong-env
    secrets:
      - kong_postgres_password
    networks:
      - kong-net
    restart: on-failure

  kong:
    image: kong:latest"
    user: "${KONG_USER:-kong}"
    depends_on:
      - db
      - kong-migrations
      - kong-migrations-up
    environment:
      <<: *kong-env
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: "${KONG_PROXY_LISTEN:-0.0.0.0:8000}"
      KONG_ADMIN_LISTEN: "${KONG_ADMIN_LISTEN:-0.0.0.0:8001}"
      # Enable more detailed metrics -- https://docs.konghq.com/gateway-oss/2.6.x/configuration/#status_listen
      KONG_STATUS_LISTEN: "${KONG_STATUS_LISTEN:-0.0.0.0:8002}"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PREFIX: ${KONG_PREFIX:-/var/run/kong}
      KONG_DECLARATIVE_CONFIG: "/opt/kong/kong.yaml"
    labels:
      # Can also be set with -l com.datadoghq.ad.logs='[{"source": "kong", "service": "kong"}]'
      com.datadoghq.ad.logs: '[{"source": "kong", "service": "kong"}]'
    secrets:
      - kong_postgres_password
    networks:
      - kong-net
    ports:
      # The following two environment variables default to an insecure value (0.0.0.0)
      # according to the CIS Security test.
      - "${KONG_INBOUND_PROXY_LISTEN:-0.0.0.0}:8000:8000/tcp"
      - "${KONG_INBOUND_SSL_PROXY_LISTEN:-0.0.0.0}:8443:8443/tcp"
      # Making them mandatory but undefined, like so would be backwards-breaking:
      # - "${KONG_INBOUND_PROXY_LISTEN?Missing inbound proxy host}:8000:8000/tcp"
      # - "${KONG_INBOUND_SSL_PROXY_LISTEN?Missing inbound proxy ssl host}:8443:8443/tcp"
      # Alternative is deactivating check 5.13 in the security bench, if we consider Kong's own config to be enough security here

      - "127.0.0.1:8001:8001/tcp"
      - "127.0.0.1:8002:8002/tcp"
      - "127.0.0.1:8444:8444/tcp"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure:5
    read_only: true
    volumes:
      - kong_prefix_vol:${KONG_PREFIX:-/var/run/kong}
      - kong_tmp_vol:/tmp
      - ./config:/opt/kong
    security_opt:
      - no-new-privileges

  db:
    image: postgres:9.5
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
      POSTGRES_PASSWORD_FILE: /run/secrets/kong_postgres_password
    secrets:
      - kong_postgres_password
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${KONG_PG_USER:-kong}"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    stdin_open: true
    tty: true
    networks:
      - kong-net
    volumes:
      - kong_data:/var/lib/postgresql/data

  konga-bootstrap:
    image: konga:v0.14.9
    entrypoint: "node ./bin/konga.js prepare --adapter postgres --uri postgresql://kong:kong@db:5432/konga | echo"
    depends_on:
      - db
      - kong-migrations
      - kong-migrations-up
    environment:
      <<: *kong-env
      NODE_ENV: development
      DB_URI: "postgresql://kong:kong@db:5432/konga"
    secrets:
      - kong_postgres_password
    networks:
      - kong-net
    restart: on-failure

  konga:
    image: konga:v0.14.9
    depends_on:
      - kong
      - db
      - konga-bootstrap
    environment:
      <<: *kong-env
      HOST: "0.0.0.0"
      PORT: 9000
      # KONGA_LOG_LEVEL: silly
      NO_AUTH: "true"
      NODE_ENV: development
      DB_ADAPTER: postgres
      DB_URI: "postgresql://kong:kong@db:5432/konga"
    secrets:
      - kong_postgres_password
    networks:
      - kong-net
    ports:
      - "9000:9000/tcp"

  example_api:
    image: nodejs-docker:latest
    depends_on:
      - kong
    networks:
      - kong-net
    ports:
      - "3333:3333/tcp"

  datadog:
    container_name: datadog-agent
    image: datadog/agent:latest
    environment:
      ## GLOBALS
      DD_API_KEY: <your key>
      DD_ENV: <your env> # dev
      DD_TAGS: <additional tags> # team:devops
      DD_AC_EXCLUDE: name:datadog-agent # exclude this container from data collection
      ## TAGS https://docs.datadoghq.com/getting_started/tagging/assigning_tags/?tab=containerizedenvironments
      DD_DOCKER_LABELS_AS_TAGS: '{"*":"%%label%%"}'
      ## LOGS https://docs.datadoghq.com/agent/docker/log/
      DD_LOGS_ENABLED: true
      DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL: true
      ## LIVE PROCESSES https://docs.datadoghq.com/graphing/infrastructure/process/?tab:docker
      DD_PROCESS_AGENT_ENABLED: true
      ## DOGSTATSD
      DD_DOGSTATSD_NON_LOCAL_TRAFFIC: true
    ports:
      - 8125:8125/udp # Dogstatsd
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup:/host/sys/fs/cgroup:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /etc/passwd:/etc/passwd:ro # LIVE PROCESSES
      - ./data/agent/conf.d:/conf.d:rw
    networks:
      - kong-net

secrets:
  kong_postgres_password:
    file: ./POSTGRES_PASSWORD
